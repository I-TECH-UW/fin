<?phprequire_once('ITechTable.php');require_once('Helper.php');class Institution extends ITechTable{        protected $_name = 'institution';    protected $_primary = 'id';    protected $_cadrelink = 'link_cadre_institution';    protected $_degreelink = 'link_institution_degrees';    protected $_institutiontypelink = 'link_institution_institutiontype';    public function Addinstitution($param)    {        $db = $this->dbfunc();        if (!is_numeric($param['instype'])) {            # ADDED A NEW INSTITUTE TYPE            $insert = array(                'typename' => $param['instype'],            );            $insertresult = $db->insert('lookup_institutiontype', $insert);            $id = $db->lastInsertId();            $param['instype'] = $id;        }        if (!is_numeric($param['sponser'])) {            # ADDED A NEW INSTITUTE TYPE            $insert = array(                'sponsorname' => $param['sponser'],            );            $insertresult = $db->insert('lookup_sponsors', $insert);            $id = $db->lastInsertId();            $param['sponser'] = $id;        }        $insert = array(            'institutionname' => $param['instutitonname'],            'type' => $param['instype'],            'address1' => $param['address1'],            'address2' => $param['address2'],            'city' => $param['city'],            'geography1' => $param['province_id'],            'geography2' => (isset($param['district_id']) ? $param['district_id'] : 0),            'geography3' => (isset($param['region_c_id']) ? $param['region_c_id'] : 0),            'postalcode' => $param['postalcode'],            'phone' => $param['phone'],            'fax' => $param['fax'],            'sponsor' => $param['sponser'],            'degrees' => 0,            'computercount' => $param['computer'],            'tutorcount' => $param['tutor'],            'studentcount' => $param['students'],            'hasdormitories' => $param['hasdormitories'],            'dormcount' => $param['dormcount'],            'tutorhousing' => $param['tutorhousing'],            'tutorhouses' => $param['tutorhouses'],            'bedcount' => $param['studbeds'],            'yearfounded' => $param['yearfound'],            'comments' => $param['comments'],        );        //TA:82 use this function to insert 'created_by' and 'timestamp_created' fields//         $rowArray = $this->dbfunc()->insert($this->_name, $insert);        $rowArray = $this->insert($insert);                $id = $this->dbfunc()->lastInsertId();        # Linking this institution to the user, if necessary        // Getting current credentials        $auth = Zend_Auth::getInstance();        $identity = $auth->getIdentity();        $helper = new Helper();        $helper->addUserInstitutionRights($identity->id, $id);        # LINKING UP CADRES        if ((is_array($param['cadre'])) && (count($param['cadre']) > 0)) {            foreach ($param['cadre'] as $key => $val) {                $c_arr = array(                    'id_cadre' => $val,                    'id_institution' => $id                );                $cadreinsert = $this->dbfunc()->insert($this->_cadrelink, $c_arr);            }        }        # LINKING UP DEGREES        if ((is_array($param['degreetypeid'])) && (count($param['degreetypeid']) > 0)) {            foreach ($param['degreetypeid'] as $key => $val) {                $c_arr = array(                    'id_degree' => $val,                    'id_institution' => $id                );                $cadreinsert = $this->dbfunc()->insert($this->_degreelink, $c_arr);            }        }        return $id;    }    public function Editinstitute($instituteid)    {        $db = $this->dbfunc();        $query = "select * from institution where id = '" . $instituteid . "'";        $select = $db->query($query);        $row = $select->fetch();        return $row;    }    public function Listinstitute($fetch)    {        $db = $this->dbfunc();        $select = $db->query("select * from institution ");        $row = $select->fetchAll();        return $row;    }    public function ListCadre($getid)    {        $select = $this->dbfunc()->select()            ->from($this->_cadre)            ->where('id_institution = ?', $getid);        $row = $this->dbfunc()->fetchAll($select);        return $row;    }    public function Updateinstitute($param)    {        $db = $this->dbfunc();        if (!is_numeric($param['instype'])) {            # ADDED A NEW INSTITUTE TYPE            $insert = array(                'typename' => $param['instype'],            );            $insertresult = $db->insert('lookup_institutiontype', $insert);            $id = $db->lastInsertId();            $param['instype'] = $id;        }        if (!is_numeric($param['sponser'])) {            # ADDED A NEW INSTITUTE TYPE            $insert = array(                'sponsorname' => $param['sponser'],            );            $insertresult = $db->insert('lookup_sponsors', $insert);            $id = $db->lastInsertId();            $param['sponser'] = $id;        }        $data = array(            'institutionname' => $param['instutitonname'],            'type' => $param['instype'],            'address1' => $param['address1'],            'address2' => $param['address2'],            'city' => $param['city'],            'geography1' => $param['province_id'],            'geography2' => (isset($param['district_id']) ? substr($param['district_id'], (strrpos($param['district_id'], "_") + 1)) : 0),            'geography3' => (isset($param['region_c_id']) ? substr($param['region_c_id'], (strrpos($param['region_c_id'], "_") + 1)) : 0),            'postalcode' => $param['postalcode'],            'phone' => $param['phone'],            'fax' => $param['fax'],            'email' => $param['email'],//TA:#406            'sponsor' => $param['sponser'],            'computercount' => $param['computer'],            'tutorcount' => $param['tutor'],            'studentcount' => $param['students'],            'hasdormitories' => $param['hasdormitories'],            'dormcount' => $param['dormcount'],            'tutorhousing' => $param['tutorhousing'],            'tutorhouses' => $param['tutorhouses'],            'bedcount' => $param['studbeds'],            'yearfounded' => $param['yearfound'],            'comments' => $param['comments'],            'degreetypeid' => $param['degreetypeid'],        );        $id = $param['editid'];        //TA:82 use this function to insert 'modified_by' and 'timestamp_updated' fields        //         $db->update('institution', $data, "id = '" . $param['editid'] . "'");        $this->update($data, "id = '" . $param['editid'] . "'");                $helper = new Helper();        # LINKING UP CADRES        $helper->setExternalValues($this->_cadrelink, "id_institution", "id_cadre", isset($param['cadre']) ? $param['cadre'] : false, $id);        # LINKING UP CADRES        $helper->setExternalValues($this->_degreelink, "id_institution", "id_degree", isset($param['degreetypeid']) ? $param['degreetypeid'] : false, $id);                $this->updateStaffTranscriptSignor($param);//TA:#362        return $data;    }    public function InstitutionSearch($param)    {        $output = array();        $select = $this->dbfunc()->select()            ->from(array('i' => $this->_name),                array('id', 'institutionname', 'geography1', 'geography2', 'geography3'))            ->joinLeft(array('t' => 'lookup_institutiontype'),                'i.type = t.id',                array('typename'));        $select->joinLeft(array('l1' => 'location'),            'l1.id = i.geography1',            array("geo1" => 'location_name'));        $select->joinLeft(array('l2' => 'location'),            'l2.id = i.geography2',            array("geo2" => 'location_name'));        $select->joinLeft(array('l3' => 'location'),            'l3.id = i.geography3',            array("geo2" => 'location_name'));        $helper = new Helper();        $institutions = $helper->getUserInstitutions($helper->myid(), false);        if ((is_array($institutions)) && (count($institutions) > 0)) {            $insids = implode(",", $institutions);            $select->where('i.id IN (' . $insids . ')');        }        if (trim($param['name']) != "") {            $select->where('institutionname like ?', "%" . $param['name'] . "%");        }        if ((isset($param['geo1'])) && (is_numeric($param['geo1'])) && ($param['geo1'] > 0)) {            $select->where('geography1 = ?', "" . $param['geo1'] . "");            if ((isset($param['geo2'])) && (is_numeric($param['geo2'])) && ($param['geo2'] > 0)) {                $select->where('geography2 = ?', $param['geo2']);                if ((isset($param['geo3'])) && (is_numeric($param['geo3'])) && ($param['geo3'] > 0)) {                    $select->where('geography3 = ?', $param['geo3']);                }            }        }        if ($param['sponsor'] != 0) {            $select->where('sponsor = ?', $param['sponsor']);        }        if ($param['instype'] != 0) {            $select->where('t.id = ?', $param['instype']);        }        $result = $this->dbfunc()->fetchAll($select);        return $result;    }    public function listStaff($insid)    {//TA:#362 add transcript_signor field        $select = $this->dbfunc()->select()            ->from(array('p' => "person"),                array('id', 'first_name', 'last_name', 'phone_work', 'email', 'l.transcript_signor', 'l.tutor_title'))            ->join(array('t' => 'tutor'),                'p.id = t.personid',                array("tutorid" => "id"))            ->join(array('l' => 'link_tutor_institution'),                'l.id_tutor = t.id',                array())            ->joinLeft(array('pt' => 'person_title_option'),                'pt.id = p.title_option_id',                array('pt.title_phrase'))            //->where('l.id_institution = ?', $insid);            //TA:#252, TA:#254            ->where('l.id_institution = ? and p.is_deleted=0 and p.active="active"', $insid);        $result = $this->dbfunc()->fetchAll($select);        return $result;    }    public function getStudentCount($insid)    {        $select = $this->dbfunc()->select()            ->from(array("s" => "student"),                array("totalcount" => "COUNT(*)"))            ->join(array("l" => "link_student_cohort"),                "l.id_student = s.id",                array())            ->join(array("c" => "cohort"),                "l.id_cohort = c.id",                array())            ->where("c.institutionid = ?", $insid)            ->where("l.dropdate = '0000-00-00'")            ->where("c.graddate >= '" . date("Y-m-d") . "'")            ->where("c.startdate <= '" . date("Y-m-d") . "'");        $result = $this->dbfunc()->fetchAll($select);        //print $select;        return $result[0]['totalcount'];    }        //TA:85 fix bug with tutor count    public function getTutorCount($insid){        //TA:#254 count only active tutors        $select = $this->dbfunc()->select()        ->from(array('p' => "person"),            array("totalcount" => "COUNT(distinct(p.id))"))            ->join(array('t' => 'tutor'),                'p.id = t.personid',                array())            ->join(array("l" => "link_tutor_institution"),                "l.id_tutor = t.id",                array())                    ->where("p.active='active' and p.is_deleted=0 and l.id_institution = ?", $insid);                $result = $this->dbfunc()->fetchAll($select);                return $result[0]['totalcount'];    }       public function updateStaff()    {        # LINKING UP STAFF        $helper = new Helper();        $helper->setExternalValues("link_tutor_institution", "id_institution", "id_tutor", isset($_POST['staff']) ? $_POST['staff'] : false, $_POST['updateid']);    }        //TA:#362    public function updateStaffTranscriptSignor($param){        $db = $this->dbfunc();        $db->update('link_tutor_institution', array('transcript_signor' => '0'), 'id_institution = ' . $param['instutiton']);        $db->update('link_tutor_institution', array('tutor_title' => ''), 'id_institution = ' . $param['instutiton']);        if($param['transcript_signor']){            $db->update('link_tutor_institution', array('transcript_signor' => '1'), 'id_institution = ' . $param['instutiton'] . ' and id_tutor in (' . $param['transcript_signor'] . ')');        }         if($param['tutor_title_info']){            $arr = explode(';', $param['tutor_title_info']);            foreach ($arr as $co){                $title = explode('=', $co);                $db->update('link_tutor_institution', array('tutor_title' => $title[1]), 'id_institution = ' . $param['instutiton'] . ' and id_tutor = ' . $title[0]);            }        }        }        //TA:#362    public function getStaffTranscriptSignor($inst_id){        $select = 'select person_title_option.title_phrase, person.first_name, person.last_name, link_tutor_institution.tutor_title from link_tutor_institution             join tutor on link_tutor_institution.id_tutor = tutor.id             join person on person.id=tutor.personid             left join person_title_option on person_title_option.id=person.title_option_id where link_tutor_institution.id_institution=' . $inst_id . ' and link_tutor_institution.transcript_signor=1';        return $this->dbfunc()->fetchAll($select);    }    }?>